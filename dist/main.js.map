{"version":3,"file":"main.js","mappings":"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","sources":["webpack://2048/./src/main.ts","webpack://2048/webpack/startup"],"sourcesContent":["\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _Tile_instances, _Tile_box, _Tile_theme, _Tile_value, _Tile_coords, _Tile_placement, _Tile_changeColour;\r\nconst scoreBoard = document.getElementById(\"score-board\");\r\nconst bestBoard = document.getElementById(\"best-score\");\r\nconst container = document.getElementById(\"tile-box\");\r\nconst boxes = document.querySelectorAll(\".col\");\r\nconst gameOverScreen = document.querySelectorAll(\".gameover-screen\")[0];\r\nconst winScreen = document.querySelectorAll(\".win-screen\")[0];\r\nconst themeColour = {\r\n    2: \"#cd6155\",\r\n    4: \"#a569bd\",\r\n    8: \"#5499c7\",\r\n    16: \"#45b39d\",\r\n    32: \"#52be80\",\r\n    64: \"#f5b041\",\r\n    128: \"#dc7633\",\r\n    256: \"#cacfd2\",\r\n    512: \"#99a3a4\",\r\n    1024: \"#566573\",\r\n    2048: \"#ec7063\",\r\n    4096: \"#af7ac5\",\r\n    8192: \"#5dade2\",\r\n    16384: \"#48c9b0\",\r\n    32768: \"#58d68d\",\r\n    65536: \"#f4d03f\",\r\n    131072: \"#eb984e\",\r\n    262144: \"#f0f3f4\",\r\n    524288: \"#aab7b8\",\r\n    1048576: \"#5d6d7e\",\r\n};\r\nlet tiles = [\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n];\r\nlet gridPos = [\r\n    [\r\n        { y: 1, x: 1 },\r\n        { y: 1, x: 2 },\r\n        { y: 1, x: 3 },\r\n        { y: 1, x: 4 },\r\n    ],\r\n    [\r\n        { y: 2, x: 1 },\r\n        { y: 2, x: 2 },\r\n        { y: 2, x: 3 },\r\n        { y: 2, x: 4 },\r\n    ],\r\n    [\r\n        { y: 3, x: 1 },\r\n        { y: 3, x: 2 },\r\n        { y: 3, x: 3 },\r\n        { y: 3, x: 4 },\r\n    ],\r\n    [\r\n        { y: 4, x: 1 },\r\n        { y: 4, x: 2 },\r\n        { y: 4, x: 3 },\r\n        { y: 4, x: 4 },\r\n    ],\r\n];\r\nlet tileCoords;\r\nlet numOfMovements = 0;\r\nlet score = 0;\r\nlet bestScore;\r\nlet reachedWin = false;\r\nlet gameStart = true;\r\nclass Tile {\r\n    constructor(box, theme, placement, coords, value) {\r\n        _Tile_instances.add(this);\r\n        _Tile_box.set(this, void 0);\r\n        _Tile_theme.set(this, void 0);\r\n        _Tile_value.set(this, 0);\r\n        _Tile_coords.set(this, { y: 0, x: 0 });\r\n        _Tile_placement.set(this, { y: 0, x: 0 });\r\n        __classPrivateFieldSet(this, _Tile_box, box, \"f\");\r\n        __classPrivateFieldSet(this, _Tile_theme, theme, \"f\");\r\n        this.placement = placement;\r\n        this.coords = coords;\r\n        this.value = value;\r\n        __classPrivateFieldGet(this, _Tile_instances, \"m\", _Tile_changeColour).call(this);\r\n    }\r\n    get box() {\r\n        return __classPrivateFieldGet(this, _Tile_box, \"f\");\r\n    }\r\n    get placement() {\r\n        return __classPrivateFieldGet(this, _Tile_placement, \"f\");\r\n    }\r\n    set placement(newPlacement) {\r\n        __classPrivateFieldGet(this, _Tile_box, \"f\").style.gridRow = newPlacement.y.toString();\r\n        __classPrivateFieldGet(this, _Tile_box, \"f\").style.gridColumn = newPlacement.x.toString();\r\n        __classPrivateFieldSet(this, _Tile_placement, newPlacement, \"f\");\r\n    }\r\n    get coords() {\r\n        return __classPrivateFieldGet(this, _Tile_coords, \"f\");\r\n    }\r\n    set coords(newCoords) {\r\n        __classPrivateFieldGet(this, _Tile_box, \"f\").style.left = newCoords.x + \"px\";\r\n        __classPrivateFieldGet(this, _Tile_box, \"f\").style.top = newCoords.y + \"px\";\r\n        __classPrivateFieldSet(this, _Tile_coords, newCoords, \"f\");\r\n    }\r\n    get value() {\r\n        return __classPrivateFieldGet(this, _Tile_value, \"f\");\r\n    }\r\n    set value(newValue) {\r\n        __classPrivateFieldGet(this, _Tile_box, \"f\").innerText = newValue.toString();\r\n        __classPrivateFieldSet(this, _Tile_value, newValue, \"f\");\r\n        __classPrivateFieldGet(this, _Tile_instances, \"m\", _Tile_changeColour).call(this);\r\n    }\r\n}\r\n_Tile_box = new WeakMap(), _Tile_theme = new WeakMap(), _Tile_value = new WeakMap(), _Tile_coords = new WeakMap(), _Tile_placement = new WeakMap(), _Tile_instances = new WeakSet(), _Tile_changeColour = function _Tile_changeColour() {\r\n    const keys = Object.keys(__classPrivateFieldGet(this, _Tile_theme, \"f\"));\r\n    const values = Object.values(__classPrivateFieldGet(this, _Tile_theme, \"f\"));\r\n    const key = __classPrivateFieldGet(this, _Tile_value, \"f\").toString();\r\n    let color = \"\";\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (keys[i] === key)\r\n            color = values[i];\r\n    }\r\n    __classPrivateFieldGet(this, _Tile_box, \"f\").style.backgroundColor = color;\r\n};\r\nconst rand = () => Math.round(Math.random() * 3);\r\nconst getBestScore = () => {\r\n    const data = localStorage.getItem(\"bestScore\");\r\n    if (!data) {\r\n        localStorage.setItem(\"bestScore\", \"0\");\r\n        bestBoard.innerText = \"0\";\r\n        return 0;\r\n    }\r\n    bestBoard.innerText = data;\r\n    return parseInt(data);\r\n};\r\nconst createCoords = () => {\r\n    const elementCoords = [[], [], [], []];\r\n    let rowIndex = 0;\r\n    let colIndex = 0;\r\n    boxes.forEach((box) => {\r\n        if (colIndex === 4) {\r\n            rowIndex++;\r\n            colIndex = 0;\r\n        }\r\n        elementCoords[rowIndex].push({\r\n            x: box.offsetLeft,\r\n            y: box.offsetTop,\r\n        });\r\n        colIndex++;\r\n    });\r\n    return elementCoords;\r\n};\r\nconst checkIfCanMove = () => {\r\n    let numOfTakenTiles = 0;\r\n    let canMove = false;\r\n    for (let row = 0; row < tiles.length; row++) {\r\n        let prevValue = 0;\r\n        for (let col = 0; col < tiles[row].length; col++) {\r\n            const currTile = tiles[row][col];\r\n            const tileAhead = !tiles[row + 1]\r\n                ? null\r\n                : tiles[row + 1][col];\r\n            if (!currTile)\r\n                continue;\r\n            if (currTile.value === prevValue)\r\n                canMove = true;\r\n            if (tileAhead && currTile.value === tileAhead.value)\r\n                canMove = true;\r\n            numOfTakenTiles++;\r\n            prevValue = currTile.value;\r\n        }\r\n    }\r\n    if (numOfTakenTiles >= 16 && !canMove) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nconst drawTile = (r, c, v) => {\r\n    const coords = tileCoords[r][c];\r\n    const placement = gridPos[r][c];\r\n    const newTile = document.createElement(\"div\");\r\n    newTile.classList.add(\"tile\");\r\n    tiles[r][c] = new Tile(newTile, themeColour, placement, coords, v);\r\n    container.appendChild(newTile);\r\n    tiles[r][c];\r\n};\r\nconst setTile = () => {\r\n    let row = rand();\r\n    let col = rand();\r\n    let count = rand();\r\n    let takenTiles = [];\r\n    let tileNotAvailable = tiles[row][col] !== null;\r\n    const percentage = Math.round(Math.random() * 10) / 10;\r\n    const twoOrFour = percentage < 1 ? 2 : 4;\r\n    while (tileNotAvailable) {\r\n        if (count >= 16)\r\n            return;\r\n        if (!takenTiles.includes(`${row}${col}`)) {\r\n            takenTiles.push(`${row}${col}`);\r\n            count++;\r\n        }\r\n        row = rand();\r\n        col = rand();\r\n        tileNotAvailable = tiles[row][col] !== null;\r\n    }\r\n    drawTile(row, col, twoOrFour);\r\n    if (!checkIfCanMove()) {\r\n        gameOverScreen.style.display = \"flex\";\r\n        return;\r\n    }\r\n};\r\nconst spawn = () => {\r\n    setTimeout(() => {\r\n        setTile();\r\n    }, 150);\r\n};\r\nconst removeTile = (deleteTile, movedTile) => {\r\n    setTimeout(() => {\r\n        deleteTile.box.remove();\r\n        movedTile.box.style.zIndex = \"0\";\r\n    }, 100);\r\n};\r\nconst checkScore = (s) => {\r\n    if (s === 2048 && !reachedWin) {\r\n        gameStart = false;\r\n        winScreen.style.display = \"flex\";\r\n        reachedWin = true;\r\n    }\r\n};\r\nconst continueGame = () => {\r\n    winScreen.style.display = \"none\";\r\n    gameStart = true;\r\n    checkInput();\r\n};\r\nconst playAgain = () => location.reload();\r\nwindow.addEventListener(\"resize\", () => {\r\n    tileCoords = createCoords();\r\n    for (let y = 0; y < 3; y++) {\r\n        for (let x = 0; x < 3; x++) {\r\n            const currTile = tiles[y][x];\r\n            const newCoords = tileCoords[y][x];\r\n            if (!currTile)\r\n                continue;\r\n            currTile.coords = newCoords;\r\n        }\r\n    }\r\n});\r\nconst start = () => {\r\n    tileCoords = createCoords();\r\n    bestScore = getBestScore();\r\n    setTile();\r\n    setTile();\r\n};\r\nstart();\r\nconst moving = (box) => {\r\n    box.classList.add(\"moving\");\r\n};\r\nconst idle = (box) => {\r\n    setTimeout(() => {\r\n        box.classList.remove(\"moving\");\r\n    }, 100);\r\n};\r\nconst moveUp = () => {\r\n    for (let y = 1; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        const rowAhead = tiles[y - 1];\r\n        for (let x = 0; x < currRow.length; x++) {\r\n            let currTile = currRow[x];\r\n            let tileAhead = rowAhead[x];\r\n            let index = 1;\r\n            while (tileAhead === null && currTile !== null) {\r\n                if (y - index < 0)\r\n                    break;\r\n                if ((y - index === 0 && tiles[y - index][x] !== null) ||\r\n                    tiles[y - index][x] !== null)\r\n                    break;\r\n                const gridPosition = gridPos[y - index][x];\r\n                const coordsToJumpTo = tileCoords[y - index][x];\r\n                moving(currTile.box);\r\n                currTile.coords = coordsToJumpTo;\r\n                currTile.placement = gridPosition;\r\n                tiles[y - index][x] = currTile;\r\n                tiles[y - (index - 1)][x] = null;\r\n                index++;\r\n                numOfMovements++;\r\n                idle(currTile.box);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst upCombineCheck = () => {\r\n    for (let y = 0; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        const prevRow = tiles[y + 1];\r\n        if (!prevRow)\r\n            break;\r\n        for (let x = 0; x < currRow.length; x++) {\r\n            let currTile = currRow[x];\r\n            let prevTile = prevRow[x];\r\n            if (currTile === null || prevTile === null)\r\n                continue;\r\n            if (currTile.value !== prevTile.value)\r\n                continue;\r\n            const gridPosition = gridPos[y][x];\r\n            const coordsToJumpTo = tileCoords[y][x];\r\n            moving(prevTile.box);\r\n            prevTile.box.style.zIndex = \"99\";\r\n            prevTile.coords = coordsToJumpTo;\r\n            prevTile.placement = gridPosition;\r\n            prevTile.value = prevTile.value * 2;\r\n            checkScore(prevTile.value);\r\n            tiles[y][x] = prevTile;\r\n            tiles[y + 1][x] = null;\r\n            removeTile(currTile, prevTile);\r\n            numOfMovements++;\r\n            score += prevTile.value;\r\n            idle(prevTile.box);\r\n        }\r\n        moveUp();\r\n    }\r\n};\r\nconst moveDown = () => {\r\n    for (let y = tiles.length - 2; y > -1; y--) {\r\n        const currRow = tiles[y];\r\n        const rowAhead = tiles[y + 1];\r\n        for (let x = 0; x < currRow.length; x++) {\r\n            const currTile = currRow[x];\r\n            const tileAhead = rowAhead[x];\r\n            let index = 1;\r\n            while (tileAhead === null && currTile !== null) {\r\n                if (y + index > 3)\r\n                    break;\r\n                if ((y + index === 3 && tiles[y + index][x] !== null) ||\r\n                    tiles[y + index][x] !== null)\r\n                    break;\r\n                const gridPosition = gridPos[y + index][x];\r\n                const coordsToJumpTo = tileCoords[y + index][x];\r\n                moving(currTile.box);\r\n                currTile.coords = coordsToJumpTo;\r\n                currTile.placement = gridPosition;\r\n                tiles[y + index][x] = currTile;\r\n                tiles[y + (index - 1)][x] = null;\r\n                index++;\r\n                numOfMovements++;\r\n                idle(currTile.box);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst downCombineCheck = () => {\r\n    for (let y = tiles.length - 1; y > -1; y--) {\r\n        const currRow = tiles[y];\r\n        const prevRow = tiles[y - 1];\r\n        if (!prevRow)\r\n            break;\r\n        for (let x = 0; x < currRow.length; x++) {\r\n            let currTile = currRow[x];\r\n            let prevTile = prevRow[x];\r\n            if (currTile === null || prevTile === null)\r\n                continue;\r\n            if (currTile.value !== prevTile.value)\r\n                continue;\r\n            const gridPosition = gridPos[y][x];\r\n            const coordsToJumpTo = tileCoords[y][x];\r\n            moving(prevTile.box);\r\n            prevTile.box.style.zIndex = \"99\";\r\n            prevTile.coords = coordsToJumpTo;\r\n            prevTile.placement = gridPosition;\r\n            prevTile.value = prevTile.value * 2;\r\n            checkScore(prevTile.value);\r\n            tiles[y][x] = prevTile;\r\n            tiles[y - 1][x] = null;\r\n            removeTile(currTile, prevTile);\r\n            numOfMovements++;\r\n            score += prevTile.value;\r\n            idle(prevTile.box);\r\n        }\r\n        moveDown();\r\n    }\r\n};\r\nconst moveLeft = () => {\r\n    for (let y = 0; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        for (let x = 1; x < currRow.length; x++) {\r\n            const currTile = currRow[x];\r\n            const tileAhead = currRow[x - 1];\r\n            let index = 1;\r\n            while (tileAhead === null && currTile !== null) {\r\n                if (x - index < 0)\r\n                    break;\r\n                if ((x - index === 0 && tiles[y][x - index] !== null) ||\r\n                    tiles[y][x - index] !== null)\r\n                    break;\r\n                const gridPosition = gridPos[y][x - index];\r\n                const coordsToJumpTo = tileCoords[y][x - index];\r\n                moving(currTile.box);\r\n                currTile.coords = coordsToJumpTo;\r\n                currTile.placement = gridPosition;\r\n                tiles[y][x - index] = currTile;\r\n                tiles[y][x - (index - 1)] = null;\r\n                index++;\r\n                numOfMovements++;\r\n                idle(currTile.box);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst leftCombineCheck = () => {\r\n    for (let y = 0; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        for (let x = 0; x < currRow.length; x++) {\r\n            const currTile = currRow[x];\r\n            const prevTile = currRow[x + 1];\r\n            if (!prevTile)\r\n                break;\r\n            if (currTile === null || prevTile === null)\r\n                continue;\r\n            if (currTile.value !== prevTile.value)\r\n                continue;\r\n            const gridPosition = gridPos[y][x];\r\n            const coordsToJumpTo = tileCoords[y][x];\r\n            moving(prevTile.box);\r\n            prevTile.box.style.zIndex = \"99\";\r\n            prevTile.coords = coordsToJumpTo;\r\n            prevTile.placement = gridPosition;\r\n            prevTile.value = prevTile.value * 2;\r\n            checkScore(prevTile.value);\r\n            tiles[y][x] = prevTile;\r\n            tiles[y][x + 1] = null;\r\n            removeTile(currTile, prevTile);\r\n            numOfMovements++;\r\n            score += prevTile.value;\r\n            idle(prevTile.box);\r\n        }\r\n        moveLeft();\r\n    }\r\n};\r\nconst moveRight = () => {\r\n    for (let y = 0; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        for (let x = currRow.length - 2; x > -1; x--) {\r\n            const currTile = currRow[x];\r\n            const tileAhead = currRow[x + 1];\r\n            let index = 1;\r\n            while (tileAhead === null && currTile !== null) {\r\n                if (x + index > 3)\r\n                    break;\r\n                if ((x + index === 3 && tiles[y][x + index] !== null) ||\r\n                    tiles[y][x + index] !== null)\r\n                    break;\r\n                const gridPosition = gridPos[y][x + index];\r\n                const coordsToJumpTo = tileCoords[y][x + index];\r\n                moving(currTile.box);\r\n                currTile.coords = coordsToJumpTo;\r\n                currTile.placement = gridPosition;\r\n                tiles[y][x + index] = currTile;\r\n                tiles[y][x + (index - 1)] = null;\r\n                index++;\r\n                numOfMovements++;\r\n                idle(currTile.box);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst rightCombineCheck = () => {\r\n    for (let y = 0; y < tiles.length; y++) {\r\n        const currRow = tiles[y];\r\n        for (let x = currRow.length - 1; x > -1; x--) {\r\n            const currTile = currRow[x];\r\n            const prevTile = currRow[x - 1];\r\n            if (!prevTile)\r\n                break;\r\n            if (currTile === null || prevTile === null)\r\n                continue;\r\n            if (currTile.value !== prevTile.value)\r\n                continue;\r\n            const gridPosition = gridPos[y][x];\r\n            const coordsToJumpTo = tileCoords[y][x];\r\n            moving(prevTile.box);\r\n            prevTile.box.style.zIndex = \"99\";\r\n            prevTile.coords = coordsToJumpTo;\r\n            prevTile.placement = gridPosition;\r\n            prevTile.value = prevTile.value * 2;\r\n            checkScore(prevTile.value);\r\n            tiles[y][x] = prevTile;\r\n            tiles[y][x - 1] = null;\r\n            removeTile(currTile, prevTile);\r\n            numOfMovements++;\r\n            score += prevTile.value;\r\n            idle(prevTile.box);\r\n        }\r\n        moveRight();\r\n    }\r\n};\r\nconst checkInput = () => {\r\n    if (gameStart) {\r\n        document.addEventListener(\"keydown\", handleInput, { once: true });\r\n    }\r\n};\r\nconst handleInput = (e) => {\r\n    const key = e.key;\r\n    switch (key) {\r\n        case \"ArrowUp\":\r\n            moveUp();\r\n            upCombineCheck();\r\n            break;\r\n        case \"ArrowDown\":\r\n            moveDown();\r\n            downCombineCheck();\r\n            break;\r\n        case \"ArrowLeft\":\r\n            moveLeft();\r\n            leftCombineCheck();\r\n            break;\r\n        case \"ArrowRight\":\r\n            moveRight();\r\n            rightCombineCheck();\r\n            break;\r\n        default:\r\n            checkInput();\r\n            return;\r\n    }\r\n    if (numOfMovements > 0) {\r\n        spawn();\r\n        numOfMovements = 0;\r\n        scoreBoard.innerText = score.toString();\r\n        if (score > bestScore) {\r\n            bestBoard.innerText = score.toString();\r\n            localStorage.setItem(\"bestScore\", score.toString());\r\n        }\r\n    }\r\n    checkInput();\r\n};\r\nwindow.onload = checkInput;\r\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[142]();\n"],"names":["_Tile_instances","_Tile_box","_Tile_theme","_Tile_value","_Tile_coords","_Tile_placement","_Tile_changeColour","tileCoords","bestScore","__classPrivateFieldSet","this","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","scoreBoard","document","getElementById","bestBoard","container","boxes","querySelectorAll","gameOverScreen","winScreen","themeColour","tiles","gridPos","y","x","numOfMovements","score","reachedWin","gameStart","Tile","box","theme","placement","coords","add","newPlacement","style","gridRow","toString","gridColumn","newCoords","left","top","newValue","innerText","WeakMap","WeakSet","keys","Object","values","key","color","i","length","backgroundColor","data","rand","Math","round","random","createCoords","elementCoords","rowIndex","colIndex","forEach","push","offsetLeft","offsetTop","setTile","r","c","v","newTile","row","col","count","takenTiles","tileNotAvailable","twoOrFour","includes","createElement","classList","appendChild","numOfTakenTiles","canMove","prevValue","currTile","tileAhead","checkIfCanMove","display","removeTile","deleteTile","movedTile","setTimeout","remove","zIndex","checkScore","s","window","addEventListener","localStorage","getItem","parseInt","setItem","moving","idle","moveUp","currRow","rowAhead","index","gridPosition","coordsToJumpTo","moveDown","moveLeft","moveRight","checkInput","handleInput","once","e","prevRow","prevTile","upCombineCheck","downCombineCheck","leftCombineCheck","rightCombineCheck","onload"],"sourceRoot":""}